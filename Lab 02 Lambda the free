#lab 02 Lambda the free

# higher_order_lambda = lambda f: lambda x: f(x)
# g = lambda x: x * x
# higher_order_lambda(2)(g)  # Which argument belongs to which function call
# higher_order_lambda(g)(2)


# call_thrice = lambda f: lambda x: f(f(f(x)))
# call_thrice(lambda y: y + 1)(0)


#Q3
def lambda_curry2(func):
    """
    Returns a Curried version of a two-argument function FUNC.
    from operator import add
    curried_add = lambda_curry2(add)
    add_three = curried_add(3)
    add_three(5)
    8
    """
    "*** YOUR CODE HERE ***"
    return lambda x: lambda y: func(x,y)
curried_add = lambda_curry2(add)
add_three=curried_add(3)
print (add_three(5))

#Q7
"""Returns a function with one parameter N that counts all the numbers from
    1 to N that satisfy the two-argument predicate function Condition, where
    the first argument for Condition is N and the second argument is the
    number from 1 to N.

    >>> count_factors = count_cond(lambda n, i: n % i == 0)
    >>> count_factors(2)   # 1, 2
    2
    >>> count_factors(4)   # 1, 2, 4
    3
    >>> count_factors(12)  # 1, 2, 3, 4, 6, 12
    6

    >>> is_prime = lambda n, i: count_factors(i) == 2
    >>> count_primes = count_cond(is_prime)
    >>> count_primes(2)    # 2
    1
    >>> count_primes(3)    # 2, 3
    2
    >>> count_primes(4)    # 2, 3
    2
    >>> count_primes(5)    # 2, 3, 5
    3
    >>> count_primes(20)   # 2, 3, 5, 7, 11, 13, 17, 19
    8
    """
    "*** YOUR CODE HERE ***"
def count_cond(condition):
    def count_primes(n):
        i, count=1,0
        while i ==n:
            if condition(n,i):
                count += 1
            i+=1
        return count
    return count_primes

